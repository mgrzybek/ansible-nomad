---

- name: Check Openstack credentials
  fail: msg="Openstack credencials must be present"
  when: (lookup('env', 'OS_USERNAME') is undefined
    or lookup('env', 'OS_PASSWORD') is undefined
    or lookup('env', 'OS_AUTH_URL') is undefined
    or lookup('env', 'OS_PROJECT_ID') is undefined
    or lookup('env', 'OS_USER_DOMAIN_NAME') is undefined)
    and nomad_acl_store_swift | lower == 'true'
    and nomad_enable_acl | lower == 'true'

- name: Check vault token
  fail: msg="Vault is enabled but no token given"
  when:
    - nomad_server_mode | lower == 'true'
    - nomad_enable_vault | lower == 'true'
    - nomad_vault_token == None or nomad_vault_token | length == 0

- name: Check vault url
  fail: msg="Vault is enabled but no url given"
  when:
    - nomad_enable_vault | lower == 'true'
    - nomad_vault_url == None or nomad_vault_url | length == 0

- name: Check nomad_bootstrap_expect
  fail: msg="nomad_bootstrap_expect must be positive"
  when:
    - nomad_bootstrap_expect is defined
    - nomad_bootstrap_expect | int == 0
    - play_hosts | length == 0

- name: Set local facts
  set_fact:
    configure_nomad_ui: false
    configure_telegraf: false
    install_nomad: false

- name: Check if Nomad already exists
  stat: path={{ nomad_install_prefix }}/nomad get_checksum=no
  register: nomad_bin_stats

- name: Check de la version de nomad
  when:
    - nomad_bin_stats.stat.exists
  register: nomad_bin_version
  shell: >
    "{{ nomad_install_prefix }}"/nomad --version \
    | awk '/^Nomad/ {gsub("v","");print $2}'

- name: Deal with latest version
  when:
    - nomad_package_state | lower == 'latest'
  block:
    - name: Get last online version number
      run_once: true
      register: last_version
      shell: >
        curl \
            {% if nomad_http_proxy is defined %}-x {{ nomad_http_proxy }}{% endif %} \
            -s https://releases.hashicorp.com/nomad/ \
            | awk -F = '/nomad_/ {gsub("\>.+$","");gsub("\"","");print $2}' \
            | head -n 1|awk -F/ '{print $3}'

    - name: version to install = {{ last_version.stdout }}, install_nomad = true
      when: nomad_bin_version.stdout | default('') != last_version.stdout or not nomad_bin_version is defined
      set_fact:
        version_to_install: "{{ last_version.stdout }}"
        install_nomad: true

- name: Set facts (version to install = {{ nomad_nomad_version }}, install_nomad = true)
  when:
    - nomad_package_state == 'present'
    - nomad_bin_version.stdout | default('') != nomad_nomad_version or not nomad_bin_version is defined
  set_fact:
    version_to_install: "{{ nomad_nomad_version }}"
    install_nomad: true

- name: Check running services
  service_facts:

- name: Create consul_bin variable
  when:
    - nomad_config_nomad_ui | lower == 'true'
    - nomad_server_mode | lower == 'true'
  block:
    - name: Récupération du path de la commande consul
      shell: systemctl show -p ExecStart consul|tr ' ' '\n'|awk -F= '/path=/ {print $2}'
      register: consul_bin_path

    - name: Set consul bin path
      set_fact: consul_bin="{{ consul_bin_path.stdout }}"

    - name: Activate nomad ui
      set_fact: configure_nomad_ui=true
      when:
        - nomad_config_nomad_ui | lower == 'true'

- name: Set local facts
  when:
    - ansible_facts.services | map('quote') | join(',') | regex_search('telegraf')
    - nomad_config_telegraf | lower == 'true'
  set_fact:
    configure_telegraf: true

