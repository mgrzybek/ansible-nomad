---

- name: Sysconfig nomad file
  template: src=nomad.sysconfig.j2 dest={{ nomad_sysconfig }}
  notify: restart nomad service

- name: Main nomad configuration file
  template: src=nomad.hcl.j2 dest=/etc/nomad.d/nomad.hcl
  notify: restart nomad service

- name: Creates systemd service files
  when: nomad_http_proxy != None or nomad_https_proxy != None or nomad_http_no_proxy != None
  block:
    - name: Creates /etc/systemd/system/nomad.service.d
      file: path=/etc/systemd/system/nomad.service.d state=directory

    - name: Creates http proxy configuration file
      template: src=http-options.conf.j2 dest=/etc/systemd/system/nomad.service.d/http-options.conf
      notify:
        - reload systemd
        - restart nomad service
        #- restart nomad resource

- name: Removes proxy configuration
  file: path=/etc/systemd/systemd/nomad.service.d/http-options.conf state=absent
  notify:
    - reload systemd
    - restart nomad service
    #- restart nomad resource
  when:
    - nomad_http_proxy == None
    - nomad_https_proxy == None
    - nomad_http_no_proxy == None

- name: Telegraf configuration
  when:
    - configure_telegraf == true
  notify: restart telegraf
  template: src=nomad.telegraf.conf.j2 dest=/etc/telegraf/telegraf.d/nomad.conf

- name: Consul monitoring
  when:
    - configure_nomad_ui | lower == 'true'
  template: src=service.consul.json.j2 dest={{ nomad_consul_services_path }}/{{ item.service.name }}.json
  with_items: "{{ nomad_nomad_ui }}"
  notify: reload consul

- name: Autostart nomad
  service: name=nomad state=started enabled={{ nomad_service_enabled }}

# https://www.fpcomplete.com/blog/2018/05/controlling-access-to-nomad-clusters
- name: ACL and policies configuration
  when:
    - nomad_enable_acl | lower == 'true'
    - nomad_server_mode | lower == 'true'
  run_once: true
  block:
    - name: Create the initial token (using consul lock)
      command: consul lock nomad_acl_conf nomad acl bootstrap
      until: nomad_bootstrap is success or nomad_bootstrap.stdout.find("no longer") > -1
      register: nomad_bootstrap
  
    - name: Continue configuration when the token has been given
      when: nomad_bootstrap is success
      block:
        - name: Set accessor_id and secret_id facts
          set_fact:
            accessor_id: "{{ nomad_bootstrap.stdout_lines[0] | regex_replace('Accessor ID  = ', '') }}"
            secret_id: "{{ nomad_bootstrap.stdout_lines[1] | regex_replace('Secret ID  = ', '') }}"

        - name: Create infrastructure policy
          uri:
            url: http://127.0.0.1:4646/v1/acl/policy/infrastructure
            method: POST
            body_format: json
            body: "{{ nomad_infrastructure_policy | to_json }}"
            validate_certs: no
            status_code:
                - 201
            headers:
                X-Nomad-Token: "{{ accessor_id }}"
